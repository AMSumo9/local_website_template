---
// src/layouts/BaseLayout.astro
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Seo from '../components/Seo.astro'; // Manages SEO tags and Schema
import SupportModal from '../components/SupportModal.astro';

// --- Props Definition ---
// This layout expects data similar to your project.json structure
export interface Props {
	siteData: Record<string, any>; // Represents project.json
	pageData: Record<string, any>; // Represents frontmatter from .md or .astro page
}

const { siteData, pageData } = Astro.props;

// Combine site and page data for easier access in SEO component
const seoData = {
	site: siteData,
	page: pageData,
	canonicalUrl: Astro.url.href // Pass the current page's canonical URL
};

// Extract branding colors for inline styles
const primaryColor = siteData?.branding?.primary_color || '#2563EB';
const primaryDarkColor = siteData?.branding?.primary_color_dark || '#1D4ED8';
const accentColor = siteData?.branding?.accent_color || '#DBEAFE';
---
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	
	<!-- SEO Component injects title, meta tags, schema, etc. -->
	<Seo data={seoData} />

	<!-- Fonts -->
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
	
	<!-- Font Awesome -->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />

	<!-- Dynamic CSS Variables for Branding -->
	<style define:vars={{ primaryColor, primaryDarkColor, accentColor }}>
		:root {
			--brand-primary-color: var(--primaryColor);
			--brand-primary-dark-color: var(--primaryDarkColor);
			--brand-accent-color: var(--accentColor);
			--bg-primary: #ffffff;
			--bg-secondary: #f9fafb;
			--text-primary: #1f2937;
			--text-secondary: #4b5563;
		}
		/* Add dark mode variables if needed later */

		body { 
			font-family: 'Open Sans', 'sans-serif'; 
			background-color: var(--bg-primary); 
			color: var(--text-primary); 
		}
		h1, h2, h3, h4, h5, h6 { 
			font-family: 'Poppins', 'sans-serif'; 
			color: var(--text-primary);
		}
		/* Floating call button for mobile */
		.mobile-call-button {
			position: fixed; bottom: 20px; right: 20px; z-index: 50;
			box-shadow: 0 4px 12px rgba(0,0,0,0.2);
		}
		@media (min-width: 1024px) { /* lg breakpoint */
			.mobile-call-button { display: none; }
		}
		/* Simple FAQ accordion */
		.faq-question.active + .faq-answer { display: block; }
		.faq-question.active .faq-icon { transform: rotate(180deg); }

		/* Ensure modal displays correctly */
		#support-modal.active { display: flex; }

	</style>
</head>
<body class="text-gray-800">
	<Header siteData={siteData} />
	
	<main id="main-content">
		<slot /> <!-- Page content will be injected here -->
	</main>

	<Footer siteData={siteData} />
	<SupportModal siteData={siteData} />

	<!-- Floating Call Button (Mobile Only) -->
	<a href={`tel:${siteData?.contact?.nap?.phone_raw || '#'}`} 
	   class="mobile-call-button flex items-center justify-center w-16 h-16 bg-brand-primary text-white rounded-full text-2xl shadow-lg hover:bg-brand-primary-dark transition-colors duration-200 lg:hidden" 
	   aria-label="Call Now">
	  <i class="fas fa-phone"></i>
	</a>

	<script>
		// --- Modal Functions ---
		function openSupportModal() {
		  document.getElementById('support-modal')?.classList.add('active');
		}
		function closeSupportModal() {
		  document.getElementById('support-modal')?.classList.remove('active');
		}
		function toggleCallbackForm() {
		  const form = document.getElementById('callback-form');
		  const arrow = document.getElementById('callback-arrow');
		  if (form?.classList.contains('hidden')) {
			form.classList.remove('hidden');
			arrow?.style.setProperty('transform', 'rotate(180deg)');
		  } else {
			form?.classList.add('hidden');
			arrow?.style.setProperty('transform', 'rotate(0deg)');
		  }
		}
		// Add event listeners within DOMContentLoaded to ensure elements exist
		document.addEventListener('DOMContentLoaded', () => {
			document.getElementById('modal-close')?.addEventListener('click', closeSupportModal);
			document.addEventListener('keydown', (e) => e.key === 'Escape' && closeSupportModal());

			// Mobile menu toggle
			const menuButton = document.getElementById('mobile-menu-button');
			const mobileMenu = document.getElementById('mobile-menu');
			menuButton?.addEventListener('click', () => {
				mobileMenu?.classList.toggle('hidden');
				// Optional: Add ARIA attribute toggling here later
			});
		});
	</script>
</body>
</html>
