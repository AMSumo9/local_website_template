---
// src/components/ChildLocationGrid.astro
import { getCollection } from 'astro:content';

export interface Props {
  currentSlug: string; // The slug of the hub page (e.g., 'adelaide')
  city: string; // The name of the hub city (e.g., 'Adelaide')
}

const { currentSlug, city } = Astro.props;

// 1. Get all locations
const allLocations = await getCollection('locations');

// 2. Find only children of the current hub page
const childLocations = allLocations.filter(location => {
  // A child slug must:
  // 1. Start with the parent's slug (e.g., 'adelaide/')
  // 2. NOT be the parent slug itself
  return location.slug.startsWith(currentSlug + '/') && location.slug !== currentSlug;
});

// 3. Sort them alphabetically by city_name
childLocations.sort((a, b) => a.data.city_name.localeCompare(b.data.city_name));
---

{childLocations.length > 0 && (
  <div class="mb-16">
    <h2 class="text-3xl font-bold text-[var(--text-primary)] text-center mb-12">
      Servicing All Suburbs in <span class="text-brand-primary">{city}</span>
    </h2>
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
      {childLocations.map(location => (
        <a 
          href={`/locations/${location.slug}/`} 
          class="block text-center bg-white p-4 rounded-lg shadow-md border border-gray-200 hover:shadow-lg hover:border-brand-primary transition duration-300"
        >
          <i class="fas fa-map-marker-alt text-2xl text-brand-primary mb-2"></i>
          <h4 class="text-lg font-semibold text-[var(--text-primary)]">
            {location.data.city_name}
          </h4>
        </a>
      ))}
    </div>
  </div>
)}